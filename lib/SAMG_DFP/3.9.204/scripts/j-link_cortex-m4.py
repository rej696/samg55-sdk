# This file is autogenerated
comm_speed=4000000
reset_delay = 0
has_reset = True
show_output = False
log_level = 0

def onShowPropsDFP2(t):
    ide.addBooleanProperty(t,"arm.use_vtor" , "*|programoptions|programoptions.eraseb4program","Set PC and SP to VTOR","After reset, force PC and SP to the entries defined by the VTOR", False)
    ide.addTextProperty(t,"arm.vtor_adr" , "*|programoptions|programoptions.eraseb4program","VTOR table or numerical address", "Enter address of vector table", "exception_table")
    ide.addPropCategory(t,"diagnostics" , "*|programoptions", "Diagnostics")
    
    ide.addBooleanProperty(t,"script.show_output" , "*|diagnostics|*","Output diagnostic logging","Show diagnostic text in the Output window", False)
    ide.addTextProperty(t,"script.log_level" , "*|diagnostics|*","Diagnostic log level","Set diagnostic level (usually 0 1 or 3)", "1")
    ide.addTextProperty(t,"script.reset_delay" , "*|diagnostics|*","Additional delay after reset","Enter additional RST settling delay in msec", "0")
    ide.addBooleanProperty(t,"script.has_reset" , "*|diagnostics|*","Uncheck if RESET line is not wired","Normally checked. Uncheck if the target does not have RST connected to the debugger", True)
    ide.addTextProperty(t,"jlink.override" , "*|diagnostics|*","Segger device name override","Use a device name override for Segger tools. Leave blank for no override", "")
    ide.addTextProperty(t, "loader.board_file", "*|programoptions|**","Board file path","Set the path of board file", "${ProjectDir}/board.xboard")
    if "M23" in architecture or "M33" in architecture:
        ide.addBooleanProperty(t,"x.jlinkerase" , "*|programoptions|programoptions.eraseb4program","Use JLink_EraseChip to erase", "Do not do a chip erase when erasing, just a flash erase", True)

connect_mode = 2

def _begin_communication_session():    
    global comm_iface, comm_speed,_stealth_runstate, erase_as_needed , connect_mode
    global log_level,show_output,reset_delay,  has_reset
    log_level  = settings.getNumeric("script.log_level",log_level)
    show_output= settings.getBool("script.show_output",show_output)
    has_reset  = settings.getBool("script.has_reset",has_reset)
    reset_delay= settings.getNumeric("script.reset_delay",reset_delay)
    comm_iface = settings.getString("communication.interface", "swd") == "swd"
    comm_speed = settings.getNumeric("communication.frequency", comm_speed)
    
    _stealth_runstate = 2
    erase_as_needed = True    
    
    dev.SetApiLogging(log_level)
    log.setShowOutput(show_output)
    
    init_mem_handlers()
    jlink_connect(comm_iface, comm_speed)

        
def _end_communication_session(): 
    log.info("Jlink.Disconnect()") # Java code disconnects internally

def _begin_debug_session():
    reset_target()
    
def _debug_read(mt, start, length, data):
    try:
        dev.Read(start, data, 0, length)
    except:
        for i in range(len(data)):
            try:
                dev.Read(start + i, data, i, 1)
            except:
                data[i] = b'?'
                dev.Delay(reset_delay)
        log.info("Debug: an error occurred while reading address 0x%x length 0x%0x" % (start, length))

def _debug_write(mt, start, length, data):
    try:
        dev.Write(start, data, 0, length)
    except:
        for i in range(len(data)):
            try:
                dev.Write(start + i, data, i, 1)
            except:
                dev.Delay(reset_delay)
        log.info("Debug: an error occurred while writing address 0x%x length 0x%0x" % (start, length))

def _get_pc():
    return dev.ReadReg64(arm.PC)

def _mem_read(start, length, data):
    dev.Read(start, data, 0, length)

def _mem_write(start, length, data):
    dev.Write(start, data, 0, length)

def _run_target():
    dev.GoEx(1, 1)

def _halt_target():
    dev.Halt()
    wdt_onHalt()

def _step_target():
    wdt_onRun()
    dev.Step()
    wdt_onHalt()

def _set_pc(pc):
    dev.WriteReg64(arm.PC, pc)

def _reset_target():
    reset_and_halt()

def reset_and_halt():
    if settings.getBool("script.reset_by_pin", False):
        dev.ExecCommand("SetResetType = 2")
    dev.Reset()
    wdt_onHalt()

g_stopped = False
def _is_target_running():
    global g_stopped

    stopped = dev.IsHalted()
    if stopped != g_stopped:
        log.info("Debug: target has halted" if stopped else "Debug: target is now running")
        if stopped:
            wdt_onHalt()
        g_stopped = stopped
    return 0  == g_stopped

def _end_debug_session(): 
    run_target()
    
def _release_from_reset():
    global reset_delay
    global has_reset
    if not has_reset:
        log.info("Prog: Release from reset (soft reset)")
        reset_and_halt()
        run_target()
        return

    dev.Pins(0, dev.RESET, 1000)
    dev.Delay(reset_delay)
    dev.Pins(dev.RESET, dev.RESET, 1000)  # now float reset back
    dev.Delay(reset_delay)

def alt_hold_in_reset(): 
    # Alternative if RESET pin is not connected to debugger
    log.info("Prog: Hold in reset , no reset line")
    reset_and_halt()

def _hold_in_reset(): 
    global has_reset
    if not has_reset:
        alt_hold_in_reset()
        return
    log.info("Prog: Hold in reset")
    dev.Pins(0, dev.RESET, 1000)


def select_jlink():
    t = dev.api.GetDescriptor(-2,0,0)
    kvs = t.content.split(":=")
    sn = 0 
    for str in kvs:
        if str.startswith("<sn>"):
            sn = int(str[4:])
            break
    dev.api.JLINKARM_EMU_SelectByUSBSN(sn)

device_remap={}    
def jlink_connect(iface,speed):
    try:
        try:
            dev.SelectConfiguredJlinkTool()
        except:
            select_jlink()
            dev.Connect(iface, speed)
            return
        dev.api.JLINKARM_OpenEx()
        dev.ExecCommand( "ProjectFile = " + dev.api.cSettingsFile)

        d = settings.getString("jlink.override", "")
        if len(d.strip()) == 0:
            d = device_remap[device] if device in device_remap else device
        dev.ExecCommand("Device = " + d)
        dev.api.JLINK_TIFSelect( 1 if iface else 0)
        dev.api.JLINK_SetSpeed(get_jlink_speed())
        dev.api.JLINKARM_SetCoreIndex(0)
        dev.api.JLINKARM_Connect(True)
    except:
        dev.Connect(iface, speed)

def get_jlink_speed():
    comm_speed_is_auto = settings.getBool("communication.autoselectspeed",False)
    comm_speed_is_adaptive = settings.getBool("communication.adaptivespeed",False)
    if comm_speed_is_auto:
        return 0
    elif comm_speed_is_adaptive:
        return 0xFFFF
    return comm_speed/1000

def ensure_connect():
    pass
def _end_of_operations():
    pass 

def _flash_write(address, length, data, doerase):
    dev.api.JLINK_BeginDownload(0)
    dev.Write(address, data, 0, length)
    r = dev.api.JLINK_EndDownload()
    if r < 0:
        raise Exception("Program could not be written to flash : error code " + str(r))

def _prog_read_internal(type_of_mem, address, length, data):    
    if str(type_of_mem) == "Cfg":
        read_config(address, length, data)
        return
    dev.Read(address, data, 0, length)


def _begin_programming_operation():
    global erase_as_needed,has_reset
    erase_as_needed = True
    
    jlink_connect(comm_iface, comm_speed)
    reset_and_halt()


def _read_device_id():
    return dev.Read32(chipid)


def _erase_internal():
    global set_security_bit

    set_security_bit = False
    dev.api.JLINK_EraseChip()
    dev.Delay(100000)

def wdt_onRun():
    if "PIC32CX" in device:
        restore_wdt_mistral()

def wdt_onHalt():
    if "PIC32CX" in device:    
        halt_wdt_mistral()

def _prog_write_internal(type_of_mem, address, length, data):
    global erase_as_needed

    if address >= 0xd0000000 and address < 0xd0000100:
        type_of_mem = "Cfg" # force cfg mem type to work around rh71.EBI_CSHEMC overlapping the range that was virtually reserved for cfgbits

    if str(type_of_mem) == "Cfg":
        write_config(address, length, data)
        return
    elif str(type_of_mem) != "Pgm":
        dev.Write(address, data, 0, length)
        return

    _flash_write(address, length, data, erase_as_needed)
efc_cmd_wp   = 0x5a000001
efc_cmd_ewp  = 0x5a000003
efc_cmd_ea   = 0x5a000005
efc_cmd_epa  = 0x5a000007
efc_cmd_slb  = 0x5a000008
efc_cmd_clb  = 0x5a000009
efc_cmd_glb  = 0x5a00000a
efc_cmd_sgpb = 0x5a00000B
efc_cmd_cgpb = 0x5a00000C
efc_cmd_ggpb = 0x5a00000D


if "RH7" in device:
    FLASH_START = 0x10000000
    PAGE_SIZE = 256
    PAGE_PER_LOCKBIT = 1 
    # Bit mask for user changeable GPNVM bits
    if "RH71" in device:
        GPNVM_BIT_MASK = bytearray(b'\x02\x07\0\0\xFF\xFF\xFF\x0F\xFF\xFF\xFF\x0F\xFF\xFF\xFF\x0F')   
    else:  # RH707
        GPNVM_BIT_MASK = bytearray(b'\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF')   
    #GPNVM_BIT_MASK = 0x0FFFFFFF0FFFFFFF0FFFFFFF00000702L   # Bit mask for user changeable GPNVM bits
    chipid = 0x40100000  # HEFC CHIPID register
    efc_fmr  = 0x40004000  # HEFC Flash Mode Register
    efc_fcr  = 0x40004004  # HEFC Flash Command Register
    efc_fsr  = 0x40004008  # HEFC Flash Status Register
    efc_frr  = 0x4000400c  # HEFC Flash Result Register
    efc_fpmr = 0x40004040  # HEFC Flash Power Management Register
    efc_wpmr = 0x400040e4  # HEFC Write Protection Mode Register
    efc_cmd_ep = 0x5a000006  # available on SAMRH7, but not available on Canopus (SAME70, S70, V70/71)
    rstc_cr = 0x40100200
    rstc_sr = 0x40100204
    rstc_mr = 0x40100208
elif "M7" in architecture:
    FLASH_START = 0x0400000
    PAGE_SIZE = 512
    PAGE_PER_LOCKBIT = 32
    GPNVM_BIT_MASK = bytearray(b'\x83\x01\0\0')  #    GPNVM_BIT_MASK = 0x183 # Bit mask for user changeable GPNVM bits
    chipid = 0x400e0940  # EEFC CHIPID register
    efc_fmr  = 0x400e0c00  # EEFC Flash Mode Register
    efc_fcr  = 0x400e0c04  # EEFC Flash Command Register
    efc_fsr  = 0x400e0c08  # EEFC Flash Status Register
    efc_frr  = 0x400e0c0c  # EEFC Flash Result Register
    efc_wpmr = 0x400e0ce4  # EEFC Write Protection Mode Register
    efc_cmd_ewp = 0x5a000003  # available on Canopus (SAME70, S70, V70/71), but not available on SAMRH7
    efc_cmd_ewpl = 0x5a000004  # available on Canopus (SAME70, S70, V70/71), but not available on SAMRH7
    rstc_cr = 0x400e1800
    rstc_sr = 0x400e1804
    rstc_mr = 0x400e1808
elif "PIC32CX" in device:
    FLASH_START = 0x01000000
    PAGE_SIZE = 512
    PAGE_PER_LOCKBIT = 16
    GPNVM_BIT_MASK = bytearray(b'\xFF\x01\0\0')  #    GPNVM_BIT_MASK = 0x183 # Bit mask for user changeable GPNVM bits
    chipid = 0x40050200

    rstc_mr = 0x40053008
    rstc_cr = 0x40053000
    rstc_sr = 0x40053004
    WRITE_CHUNK_SIZE = 512
    ERASE_SECTOR_SIZE = 4096

else: #sam3 and sam4 devices 
    FLASH_START = 0x0400000
    PAGE_SIZE = 512
    PAGE_PER_LOCKBIT = 16
    GPNVM_BIT_MASK = bytearray(b'\x83\x01\0\0')  #    GPNVM_BIT_MASK = 0x183 # Bit mask for user changeable GPNVM bits
    chipid = 0x400e0740  # EEFC CHIPID register
    efc_fmr  = 0x400e0a00  # EEFC Flash Mode Register
    efc_fcr  = 0x400e0a04  # EEFC Flash Command Register
    efc_fsr  = 0x400e0a08  # EEFC Flash Status Register
    efc_frr  = 0x400e0a0c  # EEFC Flash Result Register
    rstc_cr = 0x400e1400
    rstc_sr = 0x400e1404
    rstc_mr = 0x400e1408

def log_efc_fsr_error(fsr):
    err_string = ""
    if "M7" in architecture:
        if fsr & 0x00080000: # FSR_MECCEMSB
            err_string = "MECCEMSB"
        if fsr & 0x00040000: # FSR_UECCEMSB
            err_string += " UECCEMSB"
        if fsr & 0x00020000: # FSR_MECCELSB
            err_string += " MECCELSB"
        if fsr & 0x00010000: # FSR_UECCELSB
            err_string += " UECCELSB"
        if fsr & 0x10: # FSR_WREER
            err_string += " WREER"
    if fsr & 8: # FSR_FLERR
        err_string += " FLERR"
    if fsr & 4: # FSR_FLOCKE
        err_string += " FLOCKE"
    if fsr & 2: # FSR_FCMDE
        err_string += " FCMDE"
    if err_string == "":
        return
    err_string = "Flash controller error " + err_string 
    raise Exception(err_string)

def waitForFlashReady():
    n = 0
    max_retries = 115
    delay = 1000
    while n < max_retries:
        r = dev.Read32(efc_fsr)
        log_efc_fsr_error(r)
        if r & 1: # FSR_FRDY:
            break
        if n > 10:
            delay = 10000
        if n > 15:
            delay = 100000
        dev.Delay(delay) 
        n = n+1
    if n == max_retries:
        raise Exception("Timeout waiting for flash ready")

def eefc_cmd(cmd):
    dev.Write32(efc_fcr, cmd)
    waitForFlashReady()


mem_plane_size = 0
bank_flip = False

def select_efc0():
    if not "PIC32CX" in device:
        return
    global efc_fmr,efc_fcr,efc_fsr,efc_frr
    efc_fmr  = 0x460E0000  # SEFC0  Flash Mode Register
    efc_fcr  = 0x460E0004  # SEFC0 Flash Command Register
    efc_fsr  = 0x460E0008  # SEFC0 Flash Status Register
    efc_frr  = 0x460E000c  # SEFC0 Flash Result Register

def select_efc1():
    global efc_fmr,efc_fcr,efc_fsr,efc_frr
    efc_fmr  = 0x460E2000  # SEFC1  Flash Mode Register
    efc_fcr  = 0x460E2004  # SEFC1 Flash Command Register
    efc_fsr  = 0x460E2008  # SEFC1 Flash Status Register
    efc_frr  = 0x460E200c  # SEFC1 Flash Result Register

def select_efc(adr):
    global mem_plane_size, bank_flip
    if not "PIC32CX" in device:
        return
    if "5112" in device:
        mem_plane_size =  0x40000
    elif "2051" in device:
        mem_plane_size =  0x100000
    else:
        mem_plane_size = 0x00080000
    adr = adr & 0x00FFffff
    first_plane = (adr  < mem_plane_size) ^ bank_flip
    
    if first_plane:
        select_efc0()
    else:
        select_efc1()

def write_config(address, length, data):
    log.info("Prog: write_config at address 0x%0X, length 0x%0X" % (address, length))
    select_efc0()    
    # Converting value to indexing access, and writing one GPNVM bit at the time
    if address == 0xD0000000:
        bit_index = 0
        for i in range(len(GPNVM_BIT_MASK)):
            val = data[i]
            for bit in range(8):
                if((GPNVM_BIT_MASK[i] >> (bit_index&7)) & 1):
                    if val  & (1 << bit):
                        log.info("Debug: Setting GPNVM bit %d" % bit_index)
                        eefc_cmd( efc_cmd_sgpb | (bit_index << 8))
                    else:
                        log.info("Debug: Clearing GPNVM bit %d" % bit_index)
                        eefc_cmd( efc_cmd_cgpb | (bit_index << 8))
                bit_index += 1
    elif address == 0xD0000004 or "RH7" in device and address == 0xD0000010:
        bit_index = 0
        if "RH7" in device:
            NUM_LOCK_BYTES = 4
        else:
            NUM_LOCK_BYTES = len(data)
        for i in range(NUM_LOCK_BYTES):
            val = data[i]
            for bit in range(8):
                if val  & (1 << bit):
                    log.info("Debug: Setting Lock bit %d" % bit_index)
                    eefc_cmd( efc_cmd_slb | (bit_index * PAGE_PER_LOCKBIT << 8))
                else:
                    log.info("Debug: Clearing Lock bit %d" % bit_index)
                    eefc_cmd( efc_cmd_clb | (bit_index * PAGE_PER_LOCKBIT << 8))
                bit_index += 1

def read_config(address, length, data):
    log.info("Prog: read_config at address 0x%0X, length 0x%0X" % (address, length))
    select_efc0()
    if address == 0xD0000000:
        eefc_cmd(efc_cmd_ggpb)
    elif address == 0xD0000004 or "RH7" in device and address == 0xD0000010:
        eefc_cmd(efc_cmd_glb)

    for read_index in range(data.__len__()):
        if read_index % 4 == 0:
            read_data = dev.Read32(efc_frr)
            log.info("Prog: Config bits at address 0x%0X, value: 0x%0X" % (address, read_data))
        data[read_index] = 0xFF & read_data
        read_data = read_data >> 8

def _handle_security_flags(address, length, data): 
    return False

HLTDBG = 1<<29
def halt_wdt_mistral():
    global old_dwdt0,old_dwdt1,sysc_wpmr
    sysc_wpmr = dev.Read32(0x400531A0)
    old_dwdt0 = dev.Read32(0x40053214)
    old_dwdt1 = dev.Read32(0x40052004)
    if 1 == (sysc_wpmr & 0x1):
        dev.Write32(0x400531A0, 0x53594300 | (sysc_wpmr & ~0x1))
 
    if 0 == (old_dwdt0 & HLTDBG):
        dev.Write32(0x40053214, old_dwdt0 | HLTDBG)

    if 0 == (old_dwdt1 & HLTDBG):
        dev.Write32(0x40052004, old_dwdt1 | HLTDBG)


def restore_wdt_mistral():
    if 0 == (old_dwdt0 & HLTDBG):
        dev.Write32(0x40053214, old_dwdt0 )

    if 0 == (old_dwdt1 & HLTDBG):
        dev.Write32(0x40052004, old_dwdt1 )

    if 1 == (sysc_wpmr & 0x1):
        dev.Write32(0x400531A0, 0x53594300 | sysc_wpmr) # Restore SYSC write-protection
target_was_reset = False
debug_session  = True

def begin_communication_session(): #mplab
    log.info("Begin comm session")
    _begin_communication_session()

def end_communication_session(): #mplab
    log.info("End comm session")
    _end_communication_session()

def begin_programming_operation(): #mplab
    global debug_session
    log.info("Begin operations")
    debug_session = False
    _begin_programming_operation()

def erase(): #mplab
    log.info("Erase")
    _erase()

def prog_write(type_of_mem, address, length, data): #mplab
    log.info("Writing %08x bytes to address 0x%08x of %s memory" % (length, address, type_of_mem))
    _prog_write(type_of_mem, address, length, data)

def prog_read(type_of_mem, address, length, data): #mplab
    log.info("Reading %08x bytes from address 0x%08x of %s memory" % (length, address, type_of_mem))
    _prog_read(type_of_mem, address, length, data)

def end_of_operations():#mplab
    log.info("End of operations")
    _end_of_operations()

def begin_debug_session():  #mplab
    log.info("Debug: Init debug session")
    global debug_session
    debug_session = True
    _begin_debug_session()

def debug_read(mt, start, length, data):  #mplab
    log.info("Debug: Reading %08x bytes at start address 0x%08x (%s)" % (length, start, mt))
    _debug_read(mt, start, length, data)

def debug_write(mt, start, length, data):  #mplab
    log.info("Debug: Writing %08x bytes at start address 0x%08x (%s)" % (length, start, mt))
    _debug_write(mt, start, length, data)

def set_pc(pc):  #mplab
    log.info("Debug: set pc to 0x%08x" % pc)
    _set_pc(pc)

def get_pc():  #mplab
    pc = _get_pc()
    log.info("Debug: get_pc PC=0x%08x" % pc)
    return pc

def run_target():#mplab
    log.info("Debug: run target")
    _run_target()

_stealth_runstate = 2
def halt_target():  #mplab
    global _stealth_runstate    
    log.info("Debug: halt target")
    _stealth_runstate = 2  # cancels stealth mode
    _halt_target()

def step_target():  #mplab
    log.info("Debug: stepping at pc 0x%08x" % get_pc())
    _step_target()

def reset_target(): #mplab
    log.info("Debug: reset")
    _reset_target()
    on_after_reset() # call autoload hook

def is_target_running():#mplab
    global _stealth_runstate
    if _stealth_runstate == 2:
        return _is_target_running()
    return _stealth_runstate != 0

def on_after_reset(): 
    if not debug_session:
        return
    if not settings.getBool("arm.use_vtor", False):
        return
    vtor_name  = settings.getString("arm.vtor_adr", "0")

    vtor = -1
    try:
        vtor = int(vtor_name,0)
    except:
        try:
            vtor=deb.GetSymbolAddress(vtor_name)
        except:
            log.error("Debug: failed to compute location of VTOR")
            return
    load_vtor(vtor) 
    pass

def load_vtor(adr):
    try:
        pc = dev.Read32(adr + 4)
        sp = dev.Read32(adr)
        set_pc(pc)
        dev.WriteReg64(arm.SP,sp)
        log.info("Setting pc=%08x and sp=%08x" % (pc, sp))
    except:
        log.error("Debug: failed to set PC and SP to contents of exception_table")

def on_program_done():
    on_after_reset()

def end_debug_session():  #mplab
    log.info("Debug: End debug session")
    _end_debug_session()

def verify_transfer(type_of_mem, address, data, length):  #mplab
    log.info("Verifying %08x bytes to address 0x%0x of %s memory" % (length, address, type_of_mem))
    _verify_transfer(type_of_mem, address, data, length)

    

def _verify_transfer(type_of_mem, address, data, length):
    if len(data) != length:
        raise Exception("The given data and length mismatch")
    d = bytearray(length)
    prog_read(type_of_mem, address, length, d)
    if str(type_of_mem) == "Cfg":
        verify_config(address, data, d, "verify")
    else:
        for i in range(length):
            if data[i] != d[i]:
                raise Exception("Verify failed for mem type {}, at address 0x{:X}".format(str(type_of_mem), address + i))

global dev_cfg_masks_bytearray
dev_cfg_masks_bytearray = None

def init_masks_as_bytearray():
    global dev_cfg_masks_bytearray
    if dev_cfg_masks_bytearray:
        return
    dev_cfg_masks_bytearray = {}
    for address, val in dev_cfg_masks.items():
        dev_cfg_masks_bytearray[address    ] = int(val      ) & 0xFF
        dev_cfg_masks_bytearray[address + 1] = int(val >> 8 ) & 0xFF
        dev_cfg_masks_bytearray[address + 2] = int(val >> 16) & 0xFF
        dev_cfg_masks_bytearray[address + 3] = int(val >> 24) & 0xFF

def verify_config(address, expected, actual, error_string_prefix):
    try:
        # older versions of MPLAB X (<=v5.45) did not pass dev_cfg_masks
        # so very_config cannot be executed
        dev_cfg_masks 
    except:
        raise Exception("{} config is not implemented".format(error_string_prefix))
    init_masks_as_bytearray()

    for index, actual_val in enumerate(actual):
        current_address = address + index
        if current_address in dev_cfg_masks_bytearray:
            mask = dev_cfg_masks_bytearray[current_address]
            expected_val = expected[index] & mask
            actual_val &= mask
            if actual_val != expected_val:
                error_string = "{} failed at address 0x{:0X}, expected 0x{:0X}, got 0x{:0X}".format(error_string_prefix, current_address, expected_val, actual_val)
                raise Exception(error_string)

def is_memory_blank_all_ffs(type_of_mem):
    return str(type_of_mem) == "Pgm" or str(type_of_mem) == "UserID"
        
def blank_check():  #mplab
    log.info("Blank check")

def blank_check_mem(type_of_mem, address, length):  #mplab
    msg.print("Blank checking %08x bytes to address 0x%0x of %s memory" % (length, address, type_of_mem))
    _blank_check_mem(type_of_mem, address, length)

def _blank_check_mem(type_of_mem, address, length):
    data = bytearray(length)
    prog_read(type_of_mem, address, length, data)
    if str(type_of_mem) == "Cfg":
        prog_read(type_of_mem, address, length, data)
        verify_config(address, data, data, "blank check")
    elif is_memory_blank_all_ffs(type_of_mem):
        for index, x in enumerate(data):
            if x != 255:
                raise Exception("Blank failed for mem type {}, at address 0x{:X}".format(str(type_of_mem), address + index))
    else:
        log.error("Blank check, ignoring {}".format(str(type_of_mem)))

def hold_in_reset():  #mplab
    log.info("Hold in reset")
    _hold_in_reset()

def release_from_reset():  #mplab
    log.info("Release from reset")
    _release_from_reset()
    
def read_device_id():#mplab
    log.info("Read device ID")
    return _read_device_id()

import os
has_samba = os.path.isfile(os.path.join("samba.py"))
if has_samba:
    import samba
from xml.dom import minidom


class MemHandlers():
    def __init__(self, board_file):
        if has_samba:
            samba.log = log
            samba.msg = msg
            samba.dev = dev
            samba.is_target_running = is_target_running
            samba.run_target = run_target
            samba.architecture = architecture
            samba.arm = arm
        self.parse_board_file(board_file)

    def parse_board_file(self, board_file):
        self.handlers = []
        xmldoc = minidom.parse(board_file)
        rangeNodes = xmldoc.getElementsByTagName("range")
        for rangeNode in rangeNodes:
            start = int(rangeNode.getAttribute("start"), 0)
            end = int(rangeNode.getAttribute("end"), 0)
            type = rangeNode.getAttribute("type")
            config = {}
            for configNode in rangeNode.childNodes:
                if configNode.nodeType == configNode.ELEMENT_NODE:
                    try:
                        config[configNode.tagName] = int(configNode.firstChild.nodeValue, 0)
                    except:
                        config[configNode.tagName] = ide.expandProjectMacros("${ProjectName}", configNode.firstChild.nodeValue).replace("\\", os.path.sep)
            if type == "samba" and has_samba:
                self.handlers.append(samba.Samba(start, end, config))
            elif type == "user":
                self.handlers.append(UserHandler(start, end, config))

    def prog_write(self, type_of_mem, address, length, data):
        log.info("Prog: Writing %d bytes to address 0x%0x of %s memory" % (length, address, type_of_mem))
        global erase_as_needed
        remainings = [[address, address + length]]
        for handler in self.handlers:
            write_start = max(address, handler.range_start)
            write_end = min(address + length, handler.range_end)
            if write_start < write_end:
                # chop the data buffer and pass it to handler and run
                if erase_as_needed:
                    handler.erase(write_start - handler.range_start, write_end - write_start)
                handler.write(write_start - handler.range_start, data[write_start - address: write_end - address])
            new_remainings = []
            for remaining in remainings:
                write_start = max(remaining[0], handler.range_start)
                write_end = min(remaining[1], handler.range_end)
                if remaining[0] < write_start < remaining[1]:
                    new_remainings.append([remaining[0], write_start])
                if remaining[0] < write_end < remaining[1]:
                    new_remainings.append([write_end, remaining[1]])
                elif write_start < write_end < remaining[0] or remaining[1] < write_start < write_end or write_start > write_end:
                    new_remainings.append(remaining)
            remainings = new_remainings
        # now write to memory ranges that are not covered by handlers
        for remaining in remainings:
            _prog_write_internal(type_of_mem, remaining[0], remaining[1] - remaining[0], data[remaining[0] - address: remaining[1] - address])

    def prog_read(self, type_of_mem, address, length, data):
        log.info("Prog: Reading %d bytes to address 0x%0x of %s memory" % (length, address, type_of_mem))
        remainings = [[address, address + length]]
        for handler in self.handlers:
            read_start = max(address, handler.range_start)
            read_end = min(address + length, handler.range_end)
            if read_start < read_end:
                # chop the data buffer and pass it to handler and run
                buffer = bytearray(read_end - read_start)
                handler.read(read_start - handler.range_start, buffer)
                data[read_start - address: read_end - address] = buffer
            new_remainings = []
            for remaining in remainings:
                read_start = max(remaining[0], handler.range_start)
                read_end = min(remaining[1], handler.range_end)
                if remaining[0] < read_start < remaining[1]:
                    new_remainings.append([remaining[0], read_start])
                if remaining[0] < read_end < remaining[1]:
                    new_remainings.append([read_end, remaining[1]])
                elif read_start < read_end < remaining[0] or remaining[1] < read_start < read_end or read_start > read_end:
                    new_remainings.append(remaining)
            remainings = new_remainings
        # now write to memory ranges that are not covered by handlers
        for remaining in remainings:
            _prog_read_internal(type_of_mem, remaining[0], remaining[1] - remaining[0], data[remaining[0] - address: remaining[1] - address])

    def erase(self):
        log.info("Prog: Erasing memory")
        for handler in self.handlers:
            if handler.range_start < handler.range_end:
                handler.erase(0, handler.range_end - handler.range_start)


class UserHandler():
    def __init__(self, range_start, range_end, config):
        self.range_start = range_start
        self.range_end = range_end
        self.config = config

    def call(self, address=0, data=None):
        if "handler_name" in self.config.keys():
            eval(self.config["handler_name"])()
        else:
            log.info("The name of handler function is missing")


def _prog_write(type_of_mem, address, length, data):
    global mem_handlers
    if mem_handlers is None:
        _prog_write_internal(type_of_mem, address, length, data)
    else:
        mem_handlers.prog_write(type_of_mem, address, length, data)


def _prog_read(type_of_mem, address, length, data):
    global mem_handlers
    if mem_handlers is None:
        _prog_read_internal(type_of_mem, address, length, data)
    else:
        mem_handlers.prog_read(type_of_mem, address, length, data)


def _erase():
    global mem_handlers, erase_as_needed
    if mem_handlers is not None:
        mem_handlers.erase()
    _erase_internal()
    erase_as_needed = False  # tell prog_write not to erase rows prior to write


def init_mem_handlers():
    global mem_handlers
    mem_handlers = None
    try:
        board_file = ide.expandProjectMacros("${ProjectName}", settings.getString("loader.board_file", "${ProjectDir}/board.xboard"))
    except:
        board_file = "./board.xboard"
    if os.path.isfile(board_file):
        mem_handlers = MemHandlers(board_file)
